{
  "version": 3,
  "sources": ["<stdin>", "../app/entry.server.tsx", "../app/root.tsx", "../app/components/card.tsx", "../app/components/navbar.tsx", "../app/components/form.tsx", "../app/components/input.tsx", "../app/components/image.tsx", "../app/components/profile-card.tsx", "../app/components/post-card.tsx", "../app/components/comment.tsx", "../app/components/replies.tsx", "../app/components/comment-section.tsx", "../app/components/add-comment.tsx", "../app/lib/database.server.ts", "../app/lib/auth.server.ts", "../app/routes/user.$username.tsx", "../app/routes/post.$postid.tsx", "../app/routes/logout.tsx", "../app/routes/signup.tsx", "../app/routes/_index.tsx", "../app/routes/login.tsx", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["export * from \"@remix-run/dev/server-build\";", "/**\n * By default, Remix will handle generating the HTTP Response for you.\n * You are free to delete this file if you'd like to, but if you ever want it revealed again, you can run `npx remix reveal` \u2728\n * For more information, see https://remix.run/file-conventions/entry.server\n */\n\nimport { PassThrough } from \"node:stream\";\n\nimport type { AppLoadContext, EntryContext } from \"@remix-run/node\";\nimport { createReadableStreamFromReadable } from \"@remix-run/node\";\nimport { RemixServer } from \"@remix-run/react\";\nimport isbot from \"isbot\";\nimport { renderToPipeableStream } from \"react-dom/server\";\n\nconst ABORT_DELAY = 5_000;\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext,\n  loadContext: AppLoadContext\n) {\n  return isbot(request.headers.get(\"user-agent\"))\n    ? handleBotRequest(\n        request,\n        responseStatusCode,\n        responseHeaders,\n        remixContext\n      )\n    : handleBrowserRequest(\n        request,\n        responseStatusCode,\n        responseHeaders,\n        remixContext\n      );\n}\n\nfunction handleBotRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  return new Promise((resolve, reject) => {\n    let shellRendered = false;\n    const { pipe, abort } = renderToPipeableStream(\n      <RemixServer\n        context={remixContext}\n        url={request.url}\n        abortDelay={ABORT_DELAY}\n      />,\n      {\n        onAllReady() {\n          shellRendered = true;\n          const body = new PassThrough();\n          const stream = createReadableStreamFromReadable(body);\n\n          responseHeaders.set(\"Content-Type\", \"text/html\");\n\n          resolve(\n            new Response(stream, {\n              headers: responseHeaders,\n              status: responseStatusCode,\n            })\n          );\n\n          pipe(body);\n        },\n        onShellError(error: unknown) {\n          reject(error);\n        },\n        onError(error: unknown) {\n          responseStatusCode = 500;\n          // Log streaming rendering errors from inside the shell.  Don't log\n          // errors encountered during initial shell rendering since they'll\n          // reject and get logged in handleDocumentRequest.\n          if (shellRendered) {\n            console.error(error);\n          }\n        },\n      }\n    );\n\n    setTimeout(abort, ABORT_DELAY);\n  });\n}\n\nfunction handleBrowserRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  return new Promise((resolve, reject) => {\n    let shellRendered = false;\n    const { pipe, abort } = renderToPipeableStream(\n      <RemixServer\n        context={remixContext}\n        url={request.url}\n        abortDelay={ABORT_DELAY}\n      />,\n      {\n        onShellReady() {\n          shellRendered = true;\n          const body = new PassThrough();\n          const stream = createReadableStreamFromReadable(body);\n\n          responseHeaders.set(\"Content-Type\", \"text/html\");\n\n          resolve(\n            new Response(stream, {\n              headers: responseHeaders,\n              status: responseStatusCode,\n            })\n          );\n\n          pipe(body);\n        },\n        onShellError(error: unknown) {\n          reject(error);\n        },\n        onError(error: unknown) {\n          responseStatusCode = 500;\n          // Log streaming rendering errors from inside the shell.  Don't log\n          // errors encountered during initial shell rendering since they'll\n          // reject and get logged in handleDocumentRequest.\n          if (shellRendered) {\n            console.error(error);\n          }\n        },\n      }\n    );\n\n    setTimeout(abort, ABORT_DELAY);\n  });\n}\n", "import { cssBundleHref } from \"@remix-run/css-bundle\";\nimport {\n  json,\n  type LinksFunction,\n  type LoaderFunctionArgs } from\n\"@remix-run/node\";\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n  useLoaderData } from\n\"@remix-run/react\";\nimport styles from \"./tailwind.css\";\nimport { Navbar } from \"./components\";\nimport { getUser } from \"./lib/auth.server\";\nimport type { TPost, TUser } from \"./types\";\nexport const links: LinksFunction = () => [\n...(cssBundleHref ?\n[{ rel: \"stylesheet\", href: cssBundleHref }] :\n[{ rel: \"stylesheet\", href: styles }])];\n\nexport const loader = async ({ request }: LoaderFunctionArgs) => {\n  const response = new Response();\n  const data = await getUser(request, response);\n  return json(data, { headers: response.headers });\n};\nexport default function App() {\n  const loaderData = useLoaderData<{user: TUser;posts: TPost[];}>();\n  return (\n    <html lang=\"en\" data-theme=\"dracula\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <Meta />\n        <Links />\n      </head>\n      <body className=\" md:max-w-5xl mx-auto\">\n        <Navbar user={loaderData?.user} />\n        <main className=\" mt-4\">\n          <Outlet />\n        </main>\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>);\n\n}", "import {\r\n  ChatBubbleOvalLeftIcon,\r\n  HeartIcon,\r\n  PaperAirplaneIcon,\r\n} from \"@heroicons/react/24/outline\";\r\nimport { HeartIcon as HeartIconSolid } from \"@heroicons/react/24/solid\";\r\nimport type { TComments, TPost, TUser } from \"~/types\";\r\nimport { AddCommentInput, ImageComponent } from \".\";\r\nimport { Form, Link } from \"@remix-run/react\";\r\nimport { useRef, useState } from \"react\";\r\nimport dayjs from \"dayjs\";\r\nimport relativeTime from \"dayjs/plugin/relativeTime\";\r\n\r\ndayjs.extend(relativeTime);\r\nexport function Card({\r\n  post,\r\n  link,\r\n  href,\r\n  currentUser,\r\n  comments,\r\n}: {\r\n  link?: boolean;\r\n  href?: string;\r\n  post: TPost;\r\n  currentUser: TUser;\r\n  comments: TComments[];\r\n}) {\r\n  const currentPostComments = comments.filter(\r\n    (comment) => comment.post_id! === post.id\r\n  );\r\n  const [comment, setComment] = useState(\"\");\r\n  const commentInputRef = useRef<HTMLInputElement>(null);\r\n  console.log(post.user);\r\n  return (\r\n    <div className=\" my-1 aspect-[4/5] max-w-sm rounded-sm  text-base-content    \">\r\n      <div className=\"flex gap-2 my-2 items-center\">\r\n        <Link to={`/user/${post.user?.username}`} className=\"avatar \">\r\n          <div className=\"w-9 h-9 rounded-full ring ring-primary ring-offset-base-100 ring-offset-1\">\r\n            <img src={post.user?.avatar} alt=\"\" />\r\n          </div>\r\n        </Link>\r\n        <Link to={`/user/${post.user?.username}`}>\r\n          <p>{post.user?.username}</p>\r\n        </Link>\r\n        <div\r\n          className=\"tooltip tooltip-bottom\"\r\n          data-tip={dayjs(post.created_at).format(\"MMMM, D YYYY\")}\r\n        >\r\n          <p className=\"text-gray-400\">\r\n            {dayjs().diff(post.created_at, \"week\")}w\r\n          </p>\r\n        </div>\r\n      </div>\r\n\r\n      <ImageComponent\r\n        src={post.image}\r\n        className=\" mt-3 mb-2 w-full h-full border border-neutral\"\r\n        alt={post.title}\r\n      />\r\n\r\n      <div className=\" pb-4 border-b border-b-neutral\">\r\n        <div className=\"\">\r\n          <section className=\"flex gap-2 my-1 text-neutral-content\">\r\n            <Form method=\"post\">\r\n              <input type=\"hidden\" name=\"post_id\" value={post.id} />\r\n              <button name=\"_action\" value=\"like\">\r\n                {post.likes.find((like) => like.user.id === currentUser.id) ? (\r\n                  <HeartIconSolid className=\"w-7 h-7\" />\r\n                ) : (\r\n                  <HeartIcon className=\"w-7 h-7\" />\r\n                )}\r\n              </button>\r\n            </Form>\r\n\r\n            <button onClick={() => commentInputRef.current?.focus()}>\r\n              <ChatBubbleOvalLeftIcon className=\"w-7 h-7\" />\r\n            </button>\r\n            <PaperAirplaneIcon className=\"w-7 h-7\" />\r\n          </section>\r\n\r\n          <p className=\"text-sm font-semibold\">{post.likes.length} likes</p>\r\n          <div className=\"flex gap-1\">\r\n            <Link to={`/user/${post.user?.username}`} className=\"font-semibold\">\r\n              {post.user?.username}\r\n            </Link>\r\n            <p>{post.title}</p>\r\n          </div>\r\n          <Link to={`/post/${post.id}`} className=\"text-sm text-gray-400\">\r\n            View all {currentPostComments.length} comments\r\n          </Link>\r\n          <div className=\"flex gap-1\">\r\n            <Link\r\n              to={`/user/${\r\n                currentPostComments[comments.length - 1]?.user.username\r\n              }`}\r\n              className=\"font-semibold\"\r\n            >\r\n              {currentPostComments[comments.length - 1]?.user.username}\r\n            </Link>\r\n            <p>{currentPostComments[comments.length - 1]?.comment.text}</p>\r\n          </div>\r\n          <AddCommentInput\r\n            ref={commentInputRef}\r\n            commentInput={comment}\r\n            comments={comments}\r\n            parentId=\"\"\r\n            post_id={post.id}\r\n            setCommentInput={setComment}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n", "import { Form, Link } from \"@remix-run/react\";\r\nimport classNames from \"classnames\";\r\n\r\nimport type { TUser } from \"~/types\";\r\n\r\nexport function Navbar({ user }: { user: TUser }) {\r\n  return (\r\n    <nav className=\"navbar rounded-md bg-secondary text-secondary-content\">\r\n      <div className=\"flex-1\">\r\n        <Link to=\"/\" className=\"btn btn-ghost normal-case text-xl\">\r\n          Home\r\n        </Link>\r\n      </div>\r\n      <div className=\"flex-none gap-2\">\r\n        {!user && (\r\n          <>\r\n            <Link to=\"/login\">Login</Link>\r\n            <Link to=\"/signup\">Signup</Link>\r\n          </>\r\n        )}\r\n        <div className=\"dropdown dropdown-end\">\r\n          {user && (\r\n            <>\r\n              <label\r\n                tabIndex={0}\r\n                className={classNames(\r\n                  { \"btn btn-ghost btn-circle avatar\": true },\r\n                  { \"placeholder \": !user.avatar_bucket_id }\r\n                )}\r\n              >\r\n                {user.avatar_bucket_id ? (\r\n                  <div className=\"w-10  rounded-full\">\r\n                    <img src={user?.avatar} loading=\"lazy\" alt=\"Account\" />\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"bg-neutral-focus text-neutral-content rounded-full w-10 \">\r\n                    <span className=\"text-lg\">{user?.username?.charAt(0)}</span>\r\n                  </div>\r\n                )}\r\n              </label>\r\n              <ul\r\n                tabIndex={0}\r\n                className={\r\n                  \"mt-3 z-[1] p-2 shadow menu menu-sm dropdown-content bg-secondary text-secondary-content rounded-box w-52\"\r\n                }\r\n              >\r\n                <li>\r\n                  <Link to={`/user/${user.username}`}>Profile</Link>\r\n                </li>\r\n                <li>\r\n                  <Link to={`/settings`}>Settings</Link>\r\n                </li>\r\n                <li>\r\n                  <Form method=\"post\" action=\"/logout\">\r\n                    <button>Logout</button>\r\n                  </Form>\r\n                </li>\r\n              </ul>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n", "import { Form, type FormProps } from \"@remix-run/react\";\r\nimport React from \"react\";\r\ntype FormComponentProps = {\r\n  children: React.ReactNode;\r\n} & Omit<FormProps & React.RefAttributes<HTMLFormElement>, \"classname\">;\r\nexport const FormComponent = ({ children, ...props }: FormComponentProps) => {\r\n  return (\r\n    <Form className=\"flex flex-col max-w-sm mx-auto gap-2\" {...props}>\r\n      {children}\r\n    </Form>\r\n  );\r\n};\r\n", "import cn from \"classnames\";\r\ntype InputComponentProps = {\r\n  classname?: string;\r\n} & Omit<React.InputHTMLAttributes<HTMLInputElement>, \"classname\">;\r\nexport const InputComponent = ({\r\n  classname,\r\n  ...props\r\n}: InputComponentProps) => {\r\n  return <input className={cn(\"border rounded-sm\", classname)} {...props} />;\r\n};\r\n", "import classNames from \"classnames\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nexport const ImageComponent = ({\r\n  className,\r\n  src,\r\n  alt,\r\n}: {\r\n  className?: string;\r\n  src: string;\r\n  alt: string;\r\n}) => {\r\n  const [hasLoaded, setHasLoaded] = useState(false);\r\n  useEffect(() => {\r\n    setHasLoaded(true);\r\n  }, []);\r\n  return (\r\n    <div className={className}>\r\n      {!hasLoaded && (\r\n        <div className=\"animate-pulse flex items-center justify-center w-full h-full bg-base-100  \">\r\n          <svg\r\n            className=\"animate-pulse w-10 h-10 text-base-200 \"\r\n            aria-hidden=\"true\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            fill=\"currentColor\"\r\n            viewBox=\"0 0 20 18\"\r\n          >\r\n            <path d=\"M18 0H2a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2Zm-5.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3Zm4.376 10.481A1 1 0 0 1 16 15H4a1 1 0 0 1-.895-1.447l3.5-7A1 1 0 0 1 7.468 6a.965.965 0 0 1 .9.5l2.775 4.757 1.546-1.887a1 1 0 0 1 1.618.1l2.541 4a1 1 0 0 1 .028 1.011Z\" />\r\n          </svg>\r\n        </div>\r\n      )}\r\n      <img\r\n        src={src}\r\n        className={classNames(\r\n          { \"h-full w-full object-cover\": true },\r\n          { hidden: !hasLoaded }\r\n        )}\r\n        onLoad={() => setHasLoaded(true)}\r\n        alt={alt}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n", "import type { TPost } from \"~/types\";\r\nimport { ChatBubbleOvalLeftIcon, HeartIcon } from \"@heroicons/react/24/solid\";\r\nimport { Link } from \"@remix-run/react\";\r\n\r\nexport const ProfileCard = ({ post }: { post: TPost }) => {\r\n  return (\r\n    <Link to={`/post/${post.id}`} className=\"group relative\">\r\n      <div className=\"w-full h-full bg-gray-700 bg-opacity-20 hidden group-hover:flex items-center justify-center z-1 absolute gap-4 inset-0 \">\r\n        <div className=\"flex gap-1 items-center\">\r\n          <HeartIcon className=\"w-5 h-5\" />\r\n          <p className=\"font-semibold text-lg\">{post.likes.length}</p>\r\n        </div>\r\n        <div className=\"flex gap-1 items-center\">\r\n          <ChatBubbleOvalLeftIcon className=\"w-5 h-5\" />\r\n          <p className=\"font-semibold text-lg\">{post.comments?.length}</p>\r\n        </div>\r\n      </div>\r\n      <img\r\n        className=\"w-full h-full object-center\"\r\n        src={post.image}\r\n        alt={post.title}\r\n      />\r\n    </Link>\r\n  );\r\n};\r\n", "import { TComments, TPost, TUser } from \"~/types\";\r\nimport dayjs from \"dayjs\";\r\nimport { CommentSection, ImageComponent } from \".\";\r\n\r\nexport function PostCard({\r\n\tpost,\r\n\tcurrentUser,\r\n\tcomments,\r\n}: {\r\n\tpost: TPost;\r\n\tcurrentUser: TUser;\r\n\tcomments: TComments[];\r\n}) {\r\n\treturn (\r\n\t\t<div className=\"card card-side bg-base-100 shadow-xl\">\r\n\t\t\t<ImageComponent\r\n\t\t\t\tclassName=\"max-w-xl max-h-[36rem]\"\r\n\t\t\t\tsrc={post.image}\r\n\t\t\t\talt={post.title}\r\n\t\t\t/>\r\n\t\t\t<div className=\"card-body pb-4\">\r\n\t\t\t\t<h2 className=\"card-title\">{post.title}</h2>\r\n\t\t\t\t<div className=\"flex gap-4 my-6 items-center\">\r\n\t\t\t\t\t<img\r\n\t\t\t\t\t\tclassName=\"rounded-full w-14 h-14 object-cover\"\r\n\t\t\t\t\t\tsrc={post.user?.avatar!}\r\n\t\t\t\t\t\talt={post.user?.username!}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<p className=\" font-bold capitalize text-sm\">\r\n\t\t\t\t\t\t\t{post.user?.username}\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t<p className=\"text-sm\">{post.user?.followers?.length} followers</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<CommentSection\r\n\t\t\t\t\tcurrentUser={currentUser}\r\n\t\t\t\t\tpost={post}\r\n\t\t\t\t\tcomments={comments}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n", "import { Link } from \"@remix-run/react\";\r\nimport dayjs from \"dayjs\";\r\nimport { TComments } from \"~/types\";\r\n\r\nexport function Comment({\r\n\tcomment,\r\n\r\n\tchildren,\r\n\tsetComment,\r\n\tsetParentId,\r\n\tisReply,\r\n}: {\r\n\tcomment: TComments;\r\n\tchildren?: React.ReactNode;\r\n\tsetComment: React.Dispatch<React.SetStateAction<string>>;\r\n\tsetParentId: React.Dispatch<React.SetStateAction<string>>;\r\n\tisReply: boolean;\r\n}) {\r\n\tlet splitComment = \"\";\r\n\tlet username = \"\";\r\n\tlet newComment = comment.comment.text;\r\n\tif (isReply) {\r\n\t\tsplitComment = comment.comment.text.split(\" \")[0];\r\n\t\tnewComment = comment.comment.text.replace(splitComment, \"\");\r\n\t\tnewComment.trimStart();\r\n\t\tusername = splitComment.replace(\"@\", \"\");\r\n\t}\r\n\treturn (\r\n\t\t<div className=\"my-2\">\r\n\t\t\t<div className=\"flex  items-center justify-center gap-1\">\r\n\t\t\t\t<Link to={`/user/${comment.user.username}`}>\r\n\t\t\t\t\t<img\r\n\t\t\t\t\t\tclassName=\"w-8 h-8 rounded-full object-cover\"\r\n\t\t\t\t\t\tsrc={comment.user.avatar}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Link>\r\n\t\t\t\t<p className=\" inline-block max-w-fit\">{comment.user.username}</p>\r\n\t\t\t\t<p className=\"text-sm text-gray-500\">\r\n\t\t\t\t\t{dayjs(comment.comment.created_at).fromNow()}\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"ml-9 text-sm flex gap-1\">\r\n\t\t\t\t{isReply && (\r\n\t\t\t\t\t<Link className=\"font-semibold\" to={`/user/${username}`}>\r\n\t\t\t\t\t\t{splitComment}\r\n\t\t\t\t\t</Link>\r\n\t\t\t\t)}\r\n\t\t\t\t<p>{newComment}</p>\r\n\t\t\t</div>\r\n\t\t\t<button\r\n\t\t\t\tonClick={() => {\r\n\t\t\t\t\tsetComment(`@${comment.user.username}`);\r\n\t\t\t\t\tif (isReply) {\r\n\t\t\t\t\t\tsetParentId(comment.parent_comment!.id);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tsetParentId(comment.comment.id);\r\n\t\t\t\t\t}\r\n\t\t\t\t}}\r\n\t\t\t\tclassName=\"text-sm \"\r\n\t\t\t>\r\n\t\t\t\treply\r\n\t\t\t</button>\r\n\t\t\t{children}\r\n\t\t</div>\r\n\t);\r\n}\r\n", "import { SupabaseClient } from \"@supabase/supabase-js\";\r\nimport dayjs from \"dayjs\";\r\nimport { TComments } from \"~/types\";\r\nimport { Comment, Reply } from \".\";\r\nimport { useState } from \"react\";\r\nimport { MinusIcon } from \"@heroicons/react/24/outline\";\r\n\r\nexport function Replies({\r\n\treplies,\r\n\t/* supabase, */\r\n\tsetComment,\r\n\tsetParentId,\r\n}: {\r\n\treplies: TComments[] | undefined;\r\n\t/* supabase: SupabaseClient<any, \"public\", any>; */\r\n\tsetComment: React.Dispatch<React.SetStateAction<string>>;\r\n\tsetParentId: React.Dispatch<React.SetStateAction<string>>;\r\n}) {\r\n\tconst [showReplies, setShowReplies] = useState(false);\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{replies && replies.length > 0 ? (\r\n\t\t\t\t<div className=\"flex items-center gap-4\">\r\n\t\t\t\t\t<span className=\"bg-neutral w-10 h-px\" />\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tclassName=\"text-sm\"\r\n\t\t\t\t\t\tonClick={() => setShowReplies((prev) => !prev)}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{showReplies\r\n\t\t\t\t\t\t\t? `Hide all replies`\r\n\t\t\t\t\t\t\t: `View all ${replies?.length} replies`}\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t) : (\r\n\t\t\t\t<></>\r\n\t\t\t)}\r\n\r\n\t\t\t{showReplies &&\r\n\t\t\t\treplies?.map((reply) => {\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<div className=\"ml-14\" key={reply.comment.id}>\r\n\t\t\t\t\t\t\t<Comment\r\n\t\t\t\t\t\t\t\tisReply\r\n\t\t\t\t\t\t\t\tsetParentId={setParentId}\r\n\t\t\t\t\t\t\t\tsetComment={setComment}\r\n\t\t\t\t\t\t\t\tcomment={reply}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t</div>\r\n\t);\r\n}\r\n", "import { TComments, TPost, TUser } from \"~/types\";\r\nimport { AddCommentInput, Comment, Replies } from \".\";\r\nimport {\r\n\tHeartIcon,\r\n\tChatBubbleOvalLeftIcon,\r\n\tPaperAirplaneIcon,\r\n} from \"@heroicons/react/24/outline\";\r\nimport { HeartIcon as HeartIconSolid } from \"@heroicons/react/24/solid\";\r\nimport { Form } from \"@remix-run/react\";\r\nimport dayjs from \"dayjs\";\r\nimport { useRef, useState } from \"react\";\r\nimport relativeTime from \"dayjs/plugin/relativeTime\";\r\n\r\ndayjs.extend(relativeTime);\r\nexport function CommentSection({\r\n\tcomments,\r\n\tpost,\r\n\tcurrentUser,\r\n}: {\r\n\tcomments: TComments[];\r\n\tpost: TPost;\r\n\tcurrentUser: TUser;\r\n}) {\r\n\tconst [comment, setComment] = useState(\"\");\r\n\tconst [parentId, setParentId] = useState(\"\");\r\n\tconst commentInputRef = useRef<HTMLInputElement>(null);\r\n\treturn (\r\n\t\t<div className=\"flex flex-col flex-1\">\r\n\t\t\t<div className=\"flex flex-col flex-1 overflow-y-auto max-h-[248px]\">\r\n\t\t\t\t{comments\r\n\t\t\t\t\t?.filter((comment) => comment.parent_comment === null)\r\n\t\t\t\t\t.map((comment) => {\r\n\t\t\t\t\t\t/* const commentAvatar = supabase.storage\r\n\t\t\t\t\t\t\t\t\t.from(comment.user.avatar_bucket_id!)\r\n\t\t\t\t\t\t\t\t\t.getPublicUrl(comment.user.avatar_name!); */\r\n\t\t\t\t\t\tconst replies = comments?.filter(\r\n\t\t\t\t\t\t\t(child) => comment.comment.id === child.parent_comment?.id\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tconsole.log(replies);\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<div key={comment.comment.id}>\r\n\t\t\t\t\t\t\t\t<Comment\r\n\t\t\t\t\t\t\t\t\tisReply={false}\r\n\t\t\t\t\t\t\t\t\tsetComment={setComment}\r\n\t\t\t\t\t\t\t\t\tsetParentId={setParentId}\r\n\t\t\t\t\t\t\t\t\tcomment={comment}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<Replies\r\n\t\t\t\t\t\t\t\t\t\tsetParentId={setParentId}\r\n\t\t\t\t\t\t\t\t\t\tsetComment={setComment}\r\n\t\t\t\t\t\t\t\t\t\treplies={replies}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</Comment>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<section className=\"flex gap-2 my-1 text-neutral-content\">\r\n\t\t\t\t\t<Form method=\"post\" className=\"w-7 h-7\">\r\n\t\t\t\t\t\t<input type=\"hidden\" name=\"post_id\" value={post.id} />\r\n\t\t\t\t\t\t<button name=\"_action\" value=\"like\">\r\n\t\t\t\t\t\t{post.likes.find((like) => like.user.id === currentUser.id) ? (\r\n\t\t\t\t\t\t\t\t\t<HeartIconSolid className=\"w-7 h-7\" />\r\n\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t<HeartIcon className=\"w-7 h-7\" />\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</Form>\r\n\r\n\t\t\t\t\t<button onClick={() => commentInputRef.current?.focus()}>\r\n\t\t\t\t\t\t<ChatBubbleOvalLeftIcon className=\"w-7 h-7\" />\r\n\t\t\t\t\t</button>\r\n\r\n\t\t\t\t\t<PaperAirplaneIcon className=\"w-7 h-7\" />\r\n\t\t\t\t</section>\r\n\t\t\t\t<p>{post.likes.length} likes</p>\r\n\t\t\t\t<p className=\"text-xs\">\r\n\t\t\t\t\t{dayjs().diff(post.created_at, \"week\") > 0\r\n\t\t\t\t\t\t? dayjs(post.created_at).format(\"[the] DD MMMM\")\r\n\t\t\t\t\t\t: dayjs(post.created_at).fromNow()}\r\n\t\t\t\t</p>\r\n\t\t\t\t<div className=\"mt-6 flex gap-2\">\r\n\t\t\t\t\t<img\r\n\t\t\t\t\t\tclassName=\"rounded-full w-9 h-9 object-cover\"\r\n\t\t\t\t\t\tsrc={currentUser.avatar}\r\n\t\t\t\t\t\talt={currentUser.username}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<AddCommentInput\r\n\t\t\t\t\t\tref={commentInputRef}\r\n\t\t\t\t\t\tcommentInput={comment}\r\n\t\t\t\t\t\tsetCommentInput={setComment}\r\n\t\t\t\t\t\tcomments={comments}\r\n\t\t\t\t\t\tparentId={parentId}\r\n\t\t\t\t\t\tpost_id={post.id}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n", "import { Form } from \"@remix-run/react\";\r\nimport { forwardRef, useState } from \"react\";\r\nimport { TComments } from \"~/types\";\r\n\r\nexport const AddCommentInput = forwardRef<\r\n\tHTMLInputElement,\r\n\t{\r\n\t\tparentId: string;\r\n\t\tpost_id: string;\r\n\t\tcommentInput: string;\r\n\t\tsetCommentInput: React.Dispatch<React.SetStateAction<string>>;\r\n\t\tcomments: TComments[];\r\n\t}\r\n>(({ commentInput, setCommentInput, parentId, post_id, comments }, ref) => {\r\n\treturn (\r\n\t\t<Form onSubmit={() => setCommentInput(\"\")} method=\"post\" className=\"flex\">\r\n\t\t\t<input type=\"hidden\" name=\"parent_id\" value={parentId} />\r\n\t\t\t<input\r\n\t\t\t\tref={ref}\r\n\t\t\t\tname=\"comment\"\r\n\t\t\t\tonChange={(e) => setCommentInput(e.target.value)}\r\n\t\t\t\tvalue={commentInput}\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tplaceholder={\r\n\t\t\t\t\tcomments?.length! > 0\r\n\t\t\t\t\t\t? \"Add a comment...\"\r\n\t\t\t\t\t\t: \"Be the first to comment!\"\r\n\t\t\t\t}\r\n\t\t\t\tclassName=\"text-sm bg-inherit focus:border-0 focus:outline-none w-full max-w-xs\"\r\n\t\t\t/>\r\n\t\t\t<input type=\"hidden\" name=\"post_id\" value={post_id} />\r\n\t\t\t{commentInput.length > 0 ? (\r\n\t\t\t\t<button className=\"text-sm\" name=\"_action\" value=\"comment\">\r\n\t\t\t\t\tPost\r\n\t\t\t\t</button>\r\n\t\t\t) : (\r\n\t\t\t\t<></>\r\n\t\t\t)}\r\n\t\t</Form>\r\n\t);\r\n});\r\n", "import { createServerClient } from \"@supabase/auth-helpers-remix\";\r\nimport type { TComments, TPost, TPostData, TUser } from \"./../types\";\r\nimport type { PostgrestError } from \"@supabase/supabase-js\";\r\nimport { getUserById } from \"./auth.server\";\r\n\r\nconst supabaseUrl = process.env.SUPABASE_URL!;\r\nconst supabaseKey = process.env.SUPABASE_API_KEY!;\r\nconst supabase = (request: Request, response: Response) =>\r\n  createServerClient(supabaseUrl, supabaseKey, { request, response });\r\n\r\nconst getPosts = async (request: Request, response: Response) => {\r\n  const { data, error } = await supabase(request, response)\r\n    .from(\"posts\")\r\n    .select(\r\n      `\r\n    id, title, image_bucket_id, image_name, created_at, \r\n    user:users(id, username, avatar_name, avatar_bucket_id),\r\n\tlikes:post_like(id, user:users!post_like_user_id_fkey(id, username))\r\n  `\r\n    )\r\n    .returns<TPostData[]>();\r\n  if (error) {\r\n    console.error(error);\r\n    return null;\r\n  }\r\n  const postsWithImages = await Promise.all(\r\n    data.map(async (post) => {\r\n      const image = getImage(request, response, post as TPostData);\r\n      const avatar = getAvatar(request, response, post.user!);\r\n      const { avatar_name, avatar_bucket_id, ...restUser } = post.user!;\r\n      const newUser = { avatar: avatar.data.publicUrl, ...restUser };\r\n      const { image_name, image_bucket_id, user, ...restPost } = post;\r\n      return { user: newUser, image: image.data.publicUrl, ...restPost };\r\n    })\r\n  );\r\n  return postsWithImages as TPost[];\r\n};\r\nconst getImage = (request: Request, response: Response, post: TPostData) => {\r\n  return supabase(request, response)\r\n    .storage.from(post.image_bucket_id)\r\n    .getPublicUrl(post.image_name);\r\n};\r\nconst getAvatar = (request: Request, response: Response, user: TUser) => {\r\n  return supabase(request, response)\r\n    .storage.from(user.avatar_bucket_id!)\r\n    .getPublicUrl(user.avatar_name!);\r\n};\r\nconst getComments = async (request: Request, response: Response) => {\r\n  const { data, error } = (await supabase(request, response)\r\n    .from(\"post_comment\")\r\n    .select(\r\n      \"post_id, comment:comments!post_comment_comment_id_fkey(id,text,created_at), parent_comment:comments!post_comment_parent_comment_id_fkey(id, text, created_at), user:users!post_comment_user_id_fkey(id, username, avatar_name, avatar_bucket_id)\"\r\n    )) as {\r\n    data: TComments[] | null;\r\n    error: PostgrestError | null;\r\n  };\r\n  console.log(data);\r\n  if (error) {\r\n    console.error(\"get comments \", error);\r\n    return null;\r\n  }\r\n  const commentsWithAvatar = await Promise.all(\r\n    // @ts-ignore\r\n    data.map(async (comment) => {\r\n      const userAvatar = getAvatar(request, response, comment.user as TUser);\r\n      const { avatar_bucket_id, avatar_name, ...restUser } = comment.user;\r\n      return {\r\n        user: { avatar: userAvatar.data.publicUrl, ...restUser },\r\n        parent_comment: comment.parent_comment,\r\n        comment: comment.comment,\r\n        post_id: comment.post_id,\r\n      };\r\n    })\r\n  );\r\n  return commentsWithAvatar;\r\n};\r\nconst getPostsByUserId = async (\r\n  request: Request,\r\n  response: Response,\r\n  id: string\r\n) => {\r\n  const { data, error } = await supabase(request, response)\r\n    .from(\"posts\")\r\n    .select(\r\n      `id, title, image_name, image_bucket_id, created_at, user:users!inner(id, username),likes:post_like(id, user:users!post_like_user_id_fkey(id, username, avatar_name, avatar_bucket_id)), comments:post_comment(id)`\r\n    )\r\n    .eq(\"user.id\", id);\r\n\r\n  if (error) {\r\n    console.error(\"post by user id \", error);\r\n    return null;\r\n  }\r\n\r\n  const postsWithImages = await Promise.all(\r\n    // @ts-ignore\r\n    data.map(async (post: TPostData) => {\r\n      const image = getImage(request, response, post);\r\n\r\n      const { created_at, image_bucket_id, image_name, ...restPost } = post;\r\n\r\n      return { ...restPost, image: image.data.publicUrl };\r\n    })\r\n  );\r\n\r\n  return postsWithImages;\r\n};\r\nconst getPostById = async (\r\n  request: Request,\r\n  response: Response,\r\n  id: string\r\n) => {\r\n  const {\r\n    data,\r\n    error,\r\n  }: { data: TPostData | null; error: PostgrestError | null } = await supabase(\r\n    request,\r\n    response\r\n  )\r\n    .from(\"posts\")\r\n    .select(\r\n      `id, title, image_name, image_bucket_id, created_at, user:users!inner(id, username, avatar_bucket_id, avatar_name), likes:post_like(id, user:users!post_like_user_id_fkey(id, username, avatar_name, avatar_bucket_id))`\r\n    )\r\n    .eq(\"id\", id)\r\n    .single();\r\n  if (error) {\r\n    console.error(\"post by id \", error);\r\n    return null;\r\n  }\r\n  const image = getImage(request, response, data!);\r\n\r\n  const { image_bucket_id, image_name, user, ...restPost } = data!;\r\n  const userWAvatar = await getUserById(request, response, user?.id as string);\r\n  return {\r\n    user: userWAvatar?.user,\r\n    ...restPost,\r\n    image: image.data.publicUrl,\r\n  } as TPost;\r\n};\r\nconst getCommentsByPostId = async (\r\n  request: Request,\r\n  response: Response,\r\n  post_id: string\r\n) => {\r\n  const { data, error } = (await supabase(request, response)\r\n    .from(\"post_comment\")\r\n    .select(\r\n      \"comment:comments!post_comment_comment_id_fkey(id,text,created_at), parent_comment:comments!post_comment_parent_comment_id_fkey(id, text, created_at), user:users!post_comment_user_id_fkey(id, username, avatar_name, avatar_bucket_id)\"\r\n    )\r\n    .eq(\"post_id\", post_id)) as {\r\n    data: TComments[] | null;\r\n    error: PostgrestError | null;\r\n  };\r\n  if (error) {\r\n    console.error(error);\r\n    return null;\r\n  }\r\n  const commentsWithAvatar = await Promise.all(\r\n    // @ts-ignore\r\n    data.map(async (comment) => {\r\n      const userAvatar = getAvatar(request, response, comment.user as TUser);\r\n      const { avatar_bucket_id, avatar_name, ...restUser } = comment.user;\r\n      return {\r\n        user: { avatar: userAvatar.data.publicUrl, ...restUser },\r\n        parent_comment: comment.parent_comment,\r\n        comment: comment.comment,\r\n      };\r\n    })\r\n  );\r\n  return commentsWithAvatar;\r\n};\r\nconst likePost = async (\r\n  request: Request,\r\n  response: Response,\r\n  user_id: string,\r\n  post_to_like_id: string\r\n) => {\r\n  const isPostLiked = await hasLikedPost(\r\n    request,\r\n    response,\r\n    user_id,\r\n    post_to_like_id\r\n  );\r\n  if (!isPostLiked) {\r\n    const likepost = await supabase(request, response)\r\n      .from(\"post_like\")\r\n      .insert({ user_id, post_id: post_to_like_id })\r\n      .select();\r\n    if (likepost.error) {\r\n      console.error(\"like post \", likepost.error);\r\n    }\r\n  }\r\n  return null;\r\n};\r\nconst unLikePost = async (\r\n  request: Request,\r\n  response: Response,\r\n  user_id: string,\r\n  post_to_remove_id: string\r\n) => {\r\n  const removeLike = await supabase(request, response)\r\n    .from(\"post_like\")\r\n    .delete()\r\n    .eq(\"user_id\", user_id)\r\n    .eq(\"post_id\", post_to_remove_id)\r\n    .select();\r\n  if (removeLike.error) {\r\n    console.error(\"remove like \", removeLike.error);\r\n  }\r\n\r\n  return null;\r\n};\r\nconst hasLikedPost = async (\r\n  request: Request,\r\n  response: Response,\r\n  user_id: string,\r\n  liked_post_id: string\r\n) => {\r\n  const isPostLiked = await supabase(request, response)\r\n    .from(\"post_like\")\r\n    .select()\r\n    .eq(\"user_id\", user_id)\r\n    .eq(\"post_id\", liked_post_id);\r\n  return isPostLiked.data && isPostLiked.data.length > 0;\r\n};\r\nconst followUser = async (\r\n  request: Request,\r\n  response: Response,\r\n  user_id: string,\r\n  user_to_follow_id: string\r\n) => {\r\n  const follower = await supabase(request, response)\r\n    .from(\"followers\")\r\n    .insert({ follower_id: user_id, following_id: user_to_follow_id })\r\n    .select();\r\n\r\n  if (follower.error) {\r\n    console.error(\"follow user \", follower.error);\r\n    return null;\r\n  }\r\n  return null;\r\n};\r\nconst unfollowUser = async (\r\n  request: Request,\r\n  response: Response,\r\n  user_id: string,\r\n  user_to_unfollow_id: string\r\n) => {\r\n  const follower = await supabase(request, response)\r\n    .from(\"followers\")\r\n    .delete()\r\n    .eq(\"follower_id\", user_id)\r\n    .eq(\"following_id\", user_to_unfollow_id)\r\n    .select();\r\n  if (follower.error) {\r\n    console.error(\"unfollow user \", follower.error);\r\n    return null;\r\n  }\r\n  return null;\r\n};\r\nconst isFollowing = async (\r\n  request: Request,\r\n  response: Response,\r\n  user_id: string,\r\n  target_user_id: string\r\n) => {\r\n  const { data, error } = await supabase(request, response)\r\n    .from(\"followers\")\r\n    .select(\"*\")\r\n    .eq(\"follower_id\", user_id)\r\n    .eq(\"following_id\", target_user_id);\r\n  if (error) {\r\n    console.error(\"is following \", error);\r\n    return false;\r\n  }\r\n\r\n  return data.length > 0 ? true : false;\r\n};\r\nconst addPost = async (\r\n  request: Request,\r\n  response: Response,\r\n  image: File,\r\n  title: string,\r\n  user_id: string\r\n) => {\r\n  const { error } = await supabase(request, response)\r\n    .storage.from(\"images\")\r\n    .download(image.name);\r\n\r\n  let uploadedImage;\r\n\r\n  if (error) {\r\n    // The image doesn't exist, so upload the new image\r\n    uploadedImage = await supabase(request, response)\r\n      .storage.from(\"images\")\r\n      .upload(image.name, image);\r\n\r\n    if (uploadedImage.error) {\r\n      console.error(uploadedImage.error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // Use the appropriate image path\r\n  const finalImagePath = uploadedImage ? uploadedImage.data.path : image.name;\r\n  const post = await supabase(request, response)\r\n    .from(\"posts\")\r\n    .insert({\r\n      title,\r\n      image_bucket_id: \"images\",\r\n      image_name: finalImagePath,\r\n      user_id,\r\n    })\r\n    .select()\r\n    .single();\r\n  if (post.error) {\r\n    console.error(post.error);\r\n    return null;\r\n  }\r\n  return post.data as TPost;\r\n};\r\nconst addComment = async (\r\n  request: Request,\r\n  response: Response,\r\n  text: string,\r\n  post_id: string,\r\n\r\n  parent_comment_id: string | null,\r\n  user_id: string\r\n) => {\r\n  const { data, error } = await supabase(request, response)\r\n    .from(\"comments\")\r\n    .insert({ text })\r\n    .select(\"id\")\r\n    .single();\r\n  if (error) {\r\n    console.error(error);\r\n    return null;\r\n  }\r\n  const postComment = await supabase(request, response)\r\n    .from(\"post_comment\")\r\n    .insert({ post_id, comment_id: data.id, parent_comment_id, user_id })\r\n    .select()\r\n    .single();\r\n  if (postComment.error) {\r\n    console.error(error);\r\n    return null;\r\n  }\r\n  return null;\r\n};\r\n\r\nexport {\r\n  supabase,\r\n  getPosts,\r\n  getPostById,\r\n  addPost,\r\n  getPostsByUserId,\r\n  getCommentsByPostId,\r\n  getComments,\r\n  getImage,\r\n  getAvatar,\r\n  followUser,\r\n  unfollowUser,\r\n  isFollowing,\r\n  addComment,\r\n  likePost,\r\n  hasLikedPost,\r\n  unLikePost,\r\n};\r\n", "import { type PostgrestError, type Provider } from \"@supabase/supabase-js\";\r\nimport { getAvatar, getPostsByUserId, supabase } from \"./database.server\";\r\nimport { json, redirect } from \"@remix-run/node\";\r\nimport type { TFollow, TUser } from \"~/types\";\r\nconst getSession = async (request: Request, response: Response) => {\r\n  const session = await supabase(request, response).auth.getSession();\r\n  if (session.error) {\r\n    console.error(session.error);\r\n    return null;\r\n  }\r\n  return session.data.session;\r\n};\r\nconst isAuthenticated = async (request: Request, response: Response) => {\r\n  const session = await getSession(request, response);\r\n  if (!session?.user) return redirect(\"/login\", { headers: response.headers });\r\n  return json(session.user, { headers: response.headers });\r\n};\r\nconst getUserById = async (\r\n  request: Request,\r\n  response: Response,\r\n  id: string\r\n) => {\r\n  const { data, error }: { data: TUser | null; error: PostgrestError | null } =\r\n    await supabase(request, response)\r\n      .from(\"users\")\r\n      .select(`*`)\r\n      .eq(\"id\", id)\r\n      .single();\r\n\r\n  if (error) {\r\n    console.error(error);\r\n    return null;\r\n  }\r\n  const followersData = await supabase(request, response)\r\n    .from(\"followers\")\r\n    .select(`id, user:users!followers_follower_id_fkey(*)`)\r\n    .eq(\"following_id\", id);\r\n  const followingData = await supabase(request, response)\r\n    .from(\"followers\")\r\n    .select(`id, user:users!followers_following_id_fkey(*)`)\r\n    .eq(\"follower_id\", id);\r\n  if (followersData.error) {\r\n    console.error(followersData.error);\r\n    return null;\r\n  }\r\n  if (followingData.error) {\r\n    console.error(followingData.error);\r\n    return null;\r\n  }\r\n  const avatar = getAvatar(request, response, data!);\r\n  const posts = await getPostsByUserId(request, response, data?.id as string);\r\n  return {\r\n    user: {\r\n      ...data,\r\n      following: followingData.data as TFollow[],\r\n      followers: followersData.data as TFollow[],\r\n      avatar: avatar.data.publicUrl,\r\n    },\r\n    posts,\r\n  };\r\n};\r\nconst getUser = async (request: Request, response: Response) => {\r\n  const { data, error } = await supabase(request, response).auth.getSession();\r\n  if (error) {\r\n    console.error(error);\r\n    return null;\r\n  }\r\n  return await getUserById(request, response, data.session?.user.id as string);\r\n};\r\nconst getUserId = async (request: Request, response: Response) => {\r\n  const { data, error } = await supabase(request, response).auth.getSession();\r\n  if (error) {\r\n    console.error(error);\r\n    return null;\r\n  }\r\n  return data.session?.user.id;\r\n};\r\nconst getUserByUsername = async (\r\n  request: Request,\r\n  response: Response,\r\n  username: string\r\n) => {\r\n  const { data, error }: { data: TUser | null; error: PostgrestError | null } =\r\n    await supabase(request, response)\r\n      .from(\"users\")\r\n      .select(`*`)\r\n      .eq(\"username\", username)\r\n      .single();\r\n  if (error) {\r\n    console.error(\"user error \", error);\r\n    return null;\r\n  }\r\n  const followersData = await supabase(request, response)\r\n    .from(\"followers\")\r\n    .select(`user:users!followers_follower_id_fkey(*)`)\r\n    .eq(\"following_id\", data?.id);\r\n\r\n  const followingData = await supabase(request, response)\r\n    .from(\"followers\")\r\n    .select(`user:users!followers_following_id_fkey(*)`)\r\n    .eq(\"follower_id\", data?.id);\r\n  if (followersData.error) {\r\n    console.error(followersData.error);\r\n    return null;\r\n  }\r\n  if (followingData.error) {\r\n    console.error(followingData.error);\r\n    return null;\r\n  }\r\n  const avatar = getAvatar(request, response, data!);\r\n  const posts = await getPostsByUserId(request, response, data?.id as string);\r\n  return {\r\n    user: {\r\n      ...data,\r\n      following: followingData.data,\r\n      followers: followersData.data,\r\n      avatar: avatar.data.publicUrl,\r\n    },\r\n    posts,\r\n  };\r\n};\r\nconst signUp = async (\r\n  request: Request,\r\n  response: Response,\r\n  email: string,\r\n  password: string,\r\n  phone: string,\r\n  username: string,\r\n  first_name: string,\r\n  last_name: string,\r\n  image: File\r\n) => {\r\n  const uploadedAvatar = await supabase(request, response)\r\n    .storage.from(\"avatars\")\r\n    .upload(image.name, image);\r\n  if (uploadedAvatar.error) {\r\n    console.error(\"upload avatar \", uploadedAvatar.error);\r\n    return null;\r\n  }\r\n  const { data, error } = await supabase(request, response).auth.signUp({\r\n    email,\r\n    password,\r\n    phone,\r\n    options: {\r\n      data: {\r\n        username,\r\n        first_name,\r\n        last_name,\r\n        avatar_bucket_id: \"avatars\",\r\n        avatar_name: uploadedAvatar.data.path,\r\n      },\r\n      emailRedirectTo:\r\n        (process.env.NEXT_PUBLIC_VERCEL_URL ?? \"http://localhost:3000/\") +\r\n        \"login?email_confirmed=true\",\r\n    },\r\n  });\r\n  if (error) {\r\n    console.error(\"signup error \", error);\r\n    return null;\r\n  }\r\n  return json(\r\n    { user: data.user, session: data.session },\r\n    { headers: response.headers }\r\n  );\r\n};\r\nconst Logout = async (request: Request, response: Response) => {\r\n  await supabase(request, response).auth.signOut();\r\n  return redirect(\"/\", { headers: response.headers });\r\n};\r\nconst LoginWPassword = async (\r\n  request: Request,\r\n  response: Response,\r\n  email: string,\r\n  password: string\r\n) => {\r\n  const { data, error } = await supabase(\r\n    request,\r\n    response\r\n  ).auth.signInWithPassword({\r\n    email,\r\n    password,\r\n  });\r\n  if (error) {\r\n    console.error(error);\r\n    return json(error.message);\r\n  }\r\n  const userData = await getUserById(request, response, data.user.id);\r\n  return redirect(`/user/${userData?.user.id}`, { headers: response.headers });\r\n};\r\nconst LoginOAuth = async (\r\n  request: Request,\r\n  response: Response,\r\n  provider: Provider\r\n) => {\r\n  const { error } = await supabase(request, response).auth.signInWithOAuth({\r\n    provider: provider,\r\n    options: { redirectTo: \"http://localhost:3000/auth/callback\" },\r\n  });\r\n  if (error) {\r\n    console.error(error);\r\n    return json(error);\r\n  }\r\n  return null;\r\n};\r\nexport {\r\n  signUp,\r\n  getSession,\r\n  LoginWPassword,\r\n  LoginOAuth,\r\n  isAuthenticated,\r\n  Logout,\r\n  getUserByUsername,\r\n  getUser,\r\n  getUserId,\r\n  getUserById\r\n};\r\n", "import {\r\n  type ActionFunctionArgs,\r\n  json,\r\n  type LoaderFunctionArgs,\r\n} from \"@remix-run/node\";\r\nimport { Form, useLoaderData } from \"@remix-run/react\";\r\nimport { ProfileCard } from \"~/components\";\r\nimport { getUser, getUserByUsername } from \"~/lib/auth.server\";\r\nimport {\r\n  addComment,\r\n  followUser,\r\n  isFollowing,\r\n  unfollowUser,\r\n} from \"~/lib/database.server\";\r\nimport cn from \"classnames\";\r\nimport type { TPost } from \"~/types\";\r\nexport const loader = async ({ request, params }: LoaderFunctionArgs) => {\r\n  const { username } = params;\r\n  const response = new Response();\r\n  const userData = await getUserByUsername(request, response, username!);\r\n  const currentUser = await getUser(request, response);\r\n  const is_following = await isFollowing(\r\n    request,\r\n    response,\r\n    currentUser?.user.id as string,\r\n    userData?.user.id as string\r\n  );\r\n  return json(\r\n    {\r\n      currentUser: currentUser?.user,\r\n      is_following,\r\n      user: userData?.user,\r\n      posts: userData?.posts,\r\n    },\r\n    { headers: response.headers }\r\n  );\r\n};\r\nexport const action = async ({ request, params }: ActionFunctionArgs) => {\r\n  const { username } = params;\r\n  const response = new Response();\r\n  const currentUser = await getUser(request, response);\r\n  const userToFollow = await getUserByUsername(request, response, username!);\r\n  const formData = await request.formData();\r\n  const _action = formData.get(\"_action\");\r\n  console.log(_action);\r\n  if (_action === \"follow\") {\r\n    await followUser(\r\n      request,\r\n      response,\r\n      currentUser?.user.id as string,\r\n      userToFollow?.user.id as string\r\n    );\r\n  }\r\n  if (_action === \"unfollow\") {\r\n    await unfollowUser(\r\n      request,\r\n      response,\r\n      currentUser?.user.id as string,\r\n      userToFollow?.user.id as string\r\n    );\r\n  }\r\n  if (_action === \"comment\") {\r\n    await addComment(\r\n      request,\r\n      response,\r\n      \"test\",\r\n      formData.get(\"post_id\") as string,\r\n      null,\r\n      currentUser?.user.id as string\r\n    );\r\n  }\r\n  return json(null, { headers: response.headers });\r\n};\r\nexport default function User() {\r\n  const { currentUser, user, posts, is_following } =\r\n    useLoaderData<typeof loader>();\r\n\r\n  return (\r\n    <div className=\"flex flex-col w-full\">\r\n      <section className=\"flex gap-24 \">\r\n        {user?.avatar_name ? (\r\n          <img\r\n            src={user?.avatar}\r\n            alt={user?.username}\r\n            loading=\"lazy\"\r\n            className=\"rounded-full h-48 w-48\"\r\n          />\r\n        ) : (\r\n          <div className=\"avatar placeholder\">\r\n            <div className=\"bg-neutral-focus text-neutral-content rounded-full w-32 \">\r\n              <span className=\"text-4xl capitalize\">\r\n                {user?.username?.charAt(0)}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        )}\r\n        <div className=\"flex flex-col gap-4\">\r\n          <div className=\"flex gap-4 items-center text-center\">\r\n            <h1 className=\"text-2xl \">{user?.username}</h1>\r\n            {currentUser?.id === user?.id && (\r\n              <button className=\"btn btn-outline btn-sm\">Edit Profile</button>\r\n            )}\r\n          </div>\r\n          <div className=\"flex gap-4\">\r\n            <p>\r\n              <span className=\"font-semibold\">{posts?.length}</span> posts\r\n            </p>\r\n            <p>\r\n              <span className=\"font-semibold\">{user?.followers?.length}</span>{\" \"}\r\n              followers\r\n            </p>\r\n            <p>\r\n              <span className=\"font-semibold\">{user?.following.length}</span>{\" \"}\r\n              following\r\n            </p>\r\n          </div>\r\n          <p className=\"font-semibold capitalize\">{user?.username}</p>\r\n          {currentUser?.id !== user?.id && (\r\n            <div>\r\n              <Form method=\"post\">\r\n                <button\r\n                  name=\"_action\"\r\n                  value={!is_following ? \"follow\" : \"unfollow\"}\r\n                  className={cn(\r\n                    { \"rounded-md px-4 p-2  text-white\": true },\r\n                    { \"bg-blue-400\": !is_following },\r\n                    { \"bg-red-400\": is_following }\r\n                  )}\r\n                >\r\n                  {!is_following ? \"Follow\" : \"Unfollow\"}\r\n                </button>\r\n              </Form>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </section>\r\n      <div className=\"divider\"></div>\r\n      <div className=\"\">\r\n        <div className=\" grid grid-cols-3 mx-auto\">\r\n          {posts?.map((post) => (\r\n            <ProfileCard key={post.id} post={post as TPost} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n", "import {\r\n  ActionFunctionArgs,\r\n  json,\r\n  type LoaderFunctionArgs,\r\n} from \"@remix-run/node\";\r\nimport { type MetaFunction, useLoaderData } from \"@remix-run/react\";\r\nimport { PostCard } from \"~/components\";\r\nimport { getUser } from \"~/lib/auth.server\";\r\nimport {\r\n  addComment,\r\n  getCommentsByPostId,\r\n  getPostById,\r\n  hasLikedPost,\r\n  likePost,\r\n  unLikePost,\r\n} from \"~/lib/database.server\";\r\nimport type { TComments, TPost, TUser } from \"~/types\";\r\n\r\nexport const meta: MetaFunction = () => {\r\n  return [\r\n    { title: \"New Remix App\" },\r\n    { name: \"description\", content: \"Welcome to Remix!\" },\r\n  ];\r\n};\r\nexport async function loader({ request, params }: LoaderFunctionArgs) {\r\n  const { postid } = params;\r\n  const response = new Response();\r\n  const currentUser = (await getUser(request, response))?.user;\r\n  const post = await getPostById(request, response, postid as string);\r\n  const comments = await getCommentsByPostId(\r\n    request,\r\n    response,\r\n    postid as string\r\n  );\r\n  return json(\r\n    {\r\n      currentUser,\r\n      post,\r\n      comments,\r\n      supabase_url: process.env.SUPABASE_URL!,\r\n      supabase_api_key: process.env.SUPABASE_API_KEY!,\r\n    },\r\n    { headers: response.headers }\r\n  );\r\n}\r\n\r\nexport async function action({ request }: ActionFunctionArgs) {\r\n  const response = new Response();\r\n  const formData = await request.formData();\r\n  const _action = formData.get(\"_action\");\r\n  const parentId = formData.get(\"parent_id\") as string;\r\n  const comment = formData.get(\"comment\") as string;\r\n  const currentUser = (await getUser(request, response))?.user;\r\n  if (_action === \"comment\") {\r\n    await addComment(\r\n      request,\r\n      response,\r\n      comment as string,\r\n      formData.get(\"post_id\") as string,\r\n      parentId.length > 0 ? parentId : null,\r\n      currentUser?.id as string\r\n    );\r\n  }\r\n  if (_action === \"like\") {\r\n    const hasLiked = await hasLikedPost(\r\n      request,\r\n      response,\r\n      currentUser?.id as string,\r\n      formData.get(\"post_id\") as string\r\n    );\r\n    if (hasLiked) {\r\n      await unLikePost(\r\n        request,\r\n        response,\r\n        currentUser?.id as string,\r\n        formData.get(\"post_id\") as string\r\n      );\r\n    } else {\r\n      await likePost(\r\n        request,\r\n        response,\r\n        currentUser?.id as string,\r\n        formData.get(\"post_id\") as string\r\n      );\r\n    }\r\n  }\r\n  return json(null, { headers: response.headers });\r\n}\r\nexport default function Post() {\r\n  const { currentUser, post, comments } = useLoaderData<typeof loader>();\r\n  return (\r\n    <div>\r\n      {post ? (\r\n        <PostCard\r\n          currentUser={currentUser as TUser}\r\n          post={post as TPost}\r\n          comments={comments as TComments[]}\r\n        />\r\n      ) : (\r\n        <h1>Post could not be found</h1>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n", "import type { ActionFunctionArgs } from \"@remix-run/node\";\r\nimport { Logout } from \"~/lib/auth.server\";\r\n\r\nexport const action = async ({ request }: ActionFunctionArgs) => {\r\n  const response = new Response();\r\n  return await Logout(request, response);\r\n};\r\n\r\nexport default function LogoutRoute() {\r\n  return <div></div>;\r\n}\r\n", "import { useActionData } from \"@remix-run/react\";\r\nimport {\r\n  unstable_createMemoryUploadHandler,\r\n  unstable_parseMultipartFormData,\r\n  type ActionFunctionArgs,\r\n} from \"@remix-run/node\";\r\nimport { signUp } from \"~/lib/auth.server\";\r\nimport { FormComponent, InputComponent } from \"~/components\";\r\nexport async function action({ request }: ActionFunctionArgs) {\r\n  const uploadHandler = unstable_createMemoryUploadHandler();\r\n  const formData = await unstable_parseMultipartFormData(\r\n    request,\r\n    uploadHandler\r\n  );\r\n  const response = new Response();\r\n  return await signUp(\r\n    request,\r\n    response,\r\n    formData.get(\"email\") as string,\r\n    formData.get(\"password\") as string,\r\n    formData.get(\"phone\") as string,\r\n    formData.get(\"username\") as string,\r\n    formData.get(\"firstname\") as string,\r\n    formData.get(\"lastname\") as string,\r\n    formData.get(\"image\") as File\r\n  );\r\n}\r\nexport default function Signup() {\r\n  const actionData = useActionData<typeof action>();\r\n\r\n  return (\r\n    <div>\r\n      <FormComponent method=\"post\" encType=\"multipart/form-data\">\r\n        <InputComponent\r\n          name=\"image\"\r\n          type=\"file\"\r\n          accept=\"image/png, image/jpeg\"\r\n        />\r\n        <InputComponent name=\"username\" placeholder=\"username\" />\r\n        <InputComponent name=\"firstname\" placeholder=\"firstname\" />\r\n        <InputComponent name=\"lastname\" placeholder=\"lastname\" />\r\n        <InputComponent name=\"email\" type=\"email\" placeholder=\"email\" />\r\n        <InputComponent name=\"phone\" type=\"tel\" placeholder=\"phone\" />\r\n        <InputComponent\r\n          name=\"password\"\r\n          type=\"password\"\r\n          placeholder=\"password\"\r\n        />\r\n        <button>Signup</button>\r\n      </FormComponent>\r\n      {actionData?.user?.confirmation_sent_at && (\r\n        <p>Email Confirmation sent to {actionData?.user.email}</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n", "import {\r\n  type MetaFunction,\r\n  type LoaderFunction,\r\n  type ActionFunction,\r\n  unstable_createMemoryUploadHandler,\r\n  unstable_parseMultipartFormData,\r\n  json,\r\n} from \"@remix-run/node\";\r\nimport { Form, useLoaderData } from \"@remix-run/react\";\r\nimport { Card } from \"~/components\";\r\nimport { getUser, getUserId } from \"~/lib/auth.server\";\r\nimport {\r\n  addComment,\r\n  addPost,\r\n  getComments,\r\n  getPosts,\r\n  hasLikedPost,\r\n  likePost,\r\n  unLikePost,\r\n} from \"~/lib/database.server\";\r\nimport type { TComments, TPost, TUser } from \"~/types\";\r\n\r\nexport const meta: MetaFunction = () => {\r\n  return [\r\n    { title: \"New Remix App\" },\r\n    { name: \"description\", content: \"Welcome to Remix!\" },\r\n  ];\r\n};\r\nexport const loader: LoaderFunction = async ({ request }) => {\r\n  const response = new Response();\r\n  const posts = await getPosts(request, response);\r\n  const comments = await getComments(request, response);\r\n  const user = await getUser(request, response);\r\n  return { user: user?.user, posts, comments };\r\n};\r\nexport const action: ActionFunction = async ({ request }) => {\r\n  const uploadHandler = unstable_createMemoryUploadHandler();\r\n  const formData = await unstable_parseMultipartFormData(\r\n    request,\r\n    uploadHandler\r\n  );\r\n\r\n  const _action = formData.get(\"_action\");\r\n  const response = new Response();\r\n  const currentUser = await getUser(request, response);\r\n  if (_action === \"add-post\") {\r\n    const image = formData.get(\"image\") as File;\r\n    const title = formData.get(\"title\") as string;\r\n    const userId = await getUserId(request, response);\r\n    await addPost(request, response, image, title, userId!);\r\n    return json(null, { headers: response.headers });\r\n  }\r\n  if (_action === \"comment\") {\r\n    await addComment(\r\n      request,\r\n      response,\r\n      \"test\",\r\n      formData.get(\"post_id\") as string,\r\n      null,\r\n      currentUser?.user.id as string\r\n    );\r\n    return json(null, { headers: response.headers });\r\n  }\r\n  if (_action === \"like\") {\r\n    const hasLiked = await hasLikedPost(\r\n      request,\r\n      response,\r\n      currentUser?.user.id as string,\r\n      formData.get(\"post_id\") as string\r\n    );\r\n    if (hasLiked) {\r\n      await unLikePost(\r\n        request,\r\n        response,\r\n        currentUser?.user.id as string,\r\n        formData.get(\"post_id\") as string\r\n      );\r\n    } else {\r\n      await likePost(\r\n        request,\r\n        response,\r\n        currentUser?.user.id as string,\r\n        formData.get(\"post_id\") as string\r\n      );\r\n    }\r\n    return json(null, { headers: response.headers });\r\n  }\r\n};\r\nexport default function Index() {\r\n  const { user, posts, comments } = useLoaderData() as {\r\n    user: TUser;\r\n    posts: TPost[];\r\n    comments: TComments[];\r\n  };\r\n  return (\r\n    <div className=\" \">\r\n      <Form method=\"post\" encType=\"multipart/form-data\">\r\n        <input name=\"image\" type=\"file\" accept=\"image/png, image/jpeg\" />\r\n        <input name=\"title\" />\r\n        <button name=\"_action\" value=\"add-post\">\r\n          Add Post\r\n        </button>\r\n      </Form>\r\n      <div className=\"grid max-w-lg mx-auto\">\r\n        {posts &&\r\n          posts.map((post) => {\r\n            if (post?.user)\r\n              return (\r\n                <Card\r\n                  post={post}\r\n                  link\r\n                  href={`/user/${post.user.username}`}\r\n                  key={post.id}\r\n                  currentUser={user}\r\n                  comments={comments}\r\n                />\r\n              );\r\n            else return <div key={post.id}></div>;\r\n          })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n", "import type { ActionFunctionArgs, LoaderFunctionArgs } from \"@remix-run/node\";\r\nimport { useActionData, useLoaderData } from \"@remix-run/react\";\r\nimport { FormComponent, InputComponent } from \"~/components\";\r\nimport { LoginOAuth, LoginWPassword } from \"~/lib/auth.server\";\r\nexport async function action({ request }: ActionFunctionArgs) {\r\n  const formData = await request.formData();\r\n  const _action = formData.get(\"_action\");\r\n  const response = new Response();\r\n\r\n  if (_action === \"email\") {\r\n    return await LoginWPassword(\r\n      request,\r\n      response,\r\n      formData.get(\"email\") as string,\r\n      formData.get(\"password\") as string\r\n    );\r\n  }\r\n  if (_action === \"google\") {\r\n    return await LoginOAuth(request, response, \"google\");\r\n  }\r\n}\r\nexport async function loader({ request }: LoaderFunctionArgs) {\r\n  const url = new URL(request.url);\r\n  const email_confirmed = url.searchParams.get(\"email_confirmed\");\r\n\r\n  if (email_confirmed) return { message: \"Email Confirmed!\" };\r\n  return null;\r\n}\r\nexport default function Login() {\r\n  const error = useActionData<typeof action>();\r\n  const email_confirmed = useLoaderData<typeof loader>();\r\n  return (\r\n    <div>\r\n      {email_confirmed ? <p>{email_confirmed.message}</p> : <></>}\r\n      <FormComponent method=\"post\">\r\n        <InputComponent type=\"hidden\" value=\"email\" name=\"_action\" />\r\n        <InputComponent placeholder=\"email\" name=\"email\" type=\"email\" />\r\n        <InputComponent\r\n          placeholder=\"password\"\r\n          name=\"password\"\r\n          type=\"password\"\r\n        />\r\n        <button>Login</button>\r\n        {error ? <p>{error.toString()}</p> : <></>}\r\n      </FormComponent>\r\n      <FormComponent method=\"post\">\r\n        <InputComponent type=\"hidden\" value=\"google\" name=\"_action\" />\r\n        <button>Login w Google</button>\r\n      </FormComponent>\r\n    </div>\r\n  );\r\n}\r\n", "export default {'entry':{'module':'/build/entry.client-WICQOCQ6.js','imports':['/build/_shared/chunk-ZWGWGGVF.js','/build/_shared/chunk-GIAAE3CH.js','/build/_shared/chunk-HXSINT44.js','/build/_shared/chunk-PWKMZAPV.js','/build/_shared/chunk-UWV35TSL.js','/build/_shared/chunk-XU7DNSPJ.js','/build/_shared/chunk-BOXFZXVX.js','/build/_shared/chunk-PNG5AS42.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-F5OONXVS.js','imports':['/build/_shared/chunk-G7CHZRZX.js','/build/_shared/chunk-MP3K22N7.js'],'hasAction':false,'hasLoader':true,'hasErrorBoundary':false},'routes/_index':{'id':'routes/_index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/_index-UMD2WFUA.js','imports':['/build/_shared/chunk-QZBLPBDB.js','/build/_shared/chunk-OW4LD7OY.js'],'hasAction':true,'hasLoader':true,'hasErrorBoundary':false},'routes/login':{'id':'routes/login','parentId':'root','path':'login','index':undefined,'caseSensitive':undefined,'module':'/build/routes/login-5AZBABV5.js','imports':['/build/_shared/chunk-OW4LD7OY.js'],'hasAction':true,'hasLoader':true,'hasErrorBoundary':false},'routes/logout':{'id':'routes/logout','parentId':'root','path':'logout','index':undefined,'caseSensitive':undefined,'module':'/build/routes/logout-RXEJJPAU.js','imports':['/build/_shared/chunk-OW4LD7OY.js'],'hasAction':true,'hasLoader':false,'hasErrorBoundary':false},'routes/post.$postid':{'id':'routes/post.$postid','parentId':'root','path':'post/:postid','index':undefined,'caseSensitive':undefined,'module':'/build/routes/post.$postid-CBKF6UA2.js','imports':['/build/_shared/chunk-QZBLPBDB.js','/build/_shared/chunk-OW4LD7OY.js'],'hasAction':true,'hasLoader':true,'hasErrorBoundary':false},'routes/signup':{'id':'routes/signup','parentId':'root','path':'signup','index':undefined,'caseSensitive':undefined,'module':'/build/routes/signup-HSHFEM3A.js','imports':['/build/_shared/chunk-OW4LD7OY.js'],'hasAction':true,'hasLoader':false,'hasErrorBoundary':false},'routes/user.$username':{'id':'routes/user.$username','parentId':'root','path':'user/:username','index':undefined,'caseSensitive':undefined,'module':'/build/routes/user.$username-YYKR4LQR.js','imports':['/build/_shared/chunk-QZBLPBDB.js','/build/_shared/chunk-OW4LD7OY.js'],'hasAction':true,'hasLoader':true,'hasErrorBoundary':false}},'version':'98601344','hmr':{'runtime':'/build/_shared\\\\chunk-PWKMZAPV.js','timestamp':1704706013000},'url':'/build/manifest-98601344.js'};", "\nimport * as entryServer from \"C:\\\\Users\\\\Administrat\u00F6r\\\\Desktop\\\\hobby\\\\social-networking-app\\\\app\\\\entry.server.tsx\";\nimport * as route0 from \"./root.tsx\";\nimport * as route1 from \"./routes/user.$username.tsx\";\nimport * as route2 from \"./routes/post.$postid.tsx\";\nimport * as route3 from \"./routes/logout.tsx\";\nimport * as route4 from \"./routes/signup.tsx\";\nimport * as route5 from \"./routes/_index.tsx\";\nimport * as route6 from \"./routes/login.tsx\";\n  export const mode = \"development\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const assetsBuildDirectory = \"public\\\\build\";\n  export const future = {};\n  export const publicPath = \"/build/\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/user.$username\": {\n      id: \"routes/user.$username\",\n      parentId: \"root\",\n      path: \"user/:username\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/post.$postid\": {\n      id: \"routes/post.$postid\",\n      parentId: \"root\",\n      path: \"post/:postid\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route2\n    },\n  \"routes/logout\": {\n      id: \"routes/logout\",\n      parentId: \"root\",\n      path: \"logout\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route3\n    },\n  \"routes/signup\": {\n      id: \"routes/signup\",\n      parentId: \"root\",\n      path: \"signup\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route4\n    },\n  \"routes/_index\": {\n      id: \"routes/_index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route5\n    },\n  \"routes/login\": {\n      id: \"routes/login\",\n      parentId: \"root\",\n      path: \"login\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route6\n    }\n  };"],
  "mappings": "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",
  "names": ["isbot", "import_node", "import_react", "import_react", "import_jsx_dev_runtime", "dayjs", "relativeTime", "comment", "HeartIconSolid", "import_react", "import_jsx_dev_runtime", "classNames", "import_react", "import_jsx_dev_runtime", "import_classnames", "import_jsx_dev_runtime", "cn", "import_classnames", "import_react", "import_jsx_dev_runtime", "classNames", "import_solid", "import_react", "import_jsx_dev_runtime", "import_jsx_dev_runtime", "import_react", "import_dayjs", "import_jsx_dev_runtime", "dayjs", "import_react", "import_jsx_dev_runtime", "import_outline", "import_solid", "import_react", "import_dayjs", "import_relativeTime", "import_jsx_dev_runtime", "dayjs", "relativeTime", "comment", "HeartIconSolid", "import_react", "import_jsx_dev_runtime", "import_node", "import_jsx_dev_runtime", "loader", "import_node", "import_react", "import_classnames", "import_jsx_dev_runtime", "loader", "cn", "action", "loader", "import_node", "import_react", "import_jsx_dev_runtime", "loader", "action", "action", "import_jsx_dev_runtime", "action", "action", "import_react", "import_node", "import_jsx_dev_runtime", "action", "action", "loader", "meta", "import_node", "import_react", "import_jsx_dev_runtime", "meta", "loader", "action", "action", "loader", "import_react", "import_jsx_dev_runtime", "action", "loader"]
}
